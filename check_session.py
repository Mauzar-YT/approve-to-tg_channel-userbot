import asyncio
import os
from pyrogram import Client

class SessionChecker:
    def __init__(self):
        self.api_id = None
        self.api_hash = None
        self.session_name = None
        
    async def get_credentials(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ Pyrogram ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ config.py
        if os.path.exists('config.py'):
            try:
                from config import API_ID, API_HASH
                self.api_id = API_ID
                self.api_hash = API_HASH
                print(f"‚úì –ù–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ config.py")
            except ImportError:
                print("‚ö† config.py –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç API_ID –∏ API_HASH")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not self.api_id:
            self.api_id = input("–í–≤–µ–¥–∏—Ç–µ API_ID: ").strip()
        if not self.api_hash:
            self.api_hash = input("–í–≤–µ–¥–∏—Ç–µ API_HASH: ").strip()
            
        self.session_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Pyrogram (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è): ").strip()
        
    async def check_session(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ Pyrogram"""
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é {self.session_name}...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram
            client = Client(name=self.session_name, api_id=int(self.api_id), api_hash=self.api_hash, system_version="4.17.30-vxCUSTOM")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await client.start()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            
            print("‚úÖ –°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞!")
            print(f"üë§ –ò–º—è: {me.first_name}")
            print(f"üìù –§–∞–º–∏–ª–∏—è: {me.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
            print(f"üîó Username: @{me.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"üÜî ID: {me.id}")
            
            await client.stop()
            return True
                
        except Exception as e:
            error_msg = str(e)
            if "msg_id is too high" in error_msg or "time has to be synchronized" in error_msg:
                print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
                print("   1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ")
                print("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç")
                print("   3. –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")
            elif "session" in error_msg.lower() and "not found" in error_msg.lower():
                print("‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏.")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏: {e}")
            return False

async def main():
    checker = SessionChecker()
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await checker.get_credentials()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    await checker.check_session()

if __name__ == "__main__":
    asyncio.run(main())
